# -*- coding: utf-8 -*-
"""auralin_novodra_data_assessing_and_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctV6wdaJempyGXs9ip1mDCcLCxt25-EA
"""

# importing libraries(modules)
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt 
import seaborn as sns

# loading dataframes
patients = pd.read_csv('patients.csv')
treatments = pd.read_csv('treatments.csv')
adverse_reactions = pd.read_csv('adverse_reactions.csv')
treatments_cut = pd.read_csv('treatments_cut.csv')

# view dataset
patients.head()

#view dataset
treatments.head()

# view dataset
treatments_cut.shape

# view dataset
adverse_reactions

"""### 1.Summary for data

This is a dataset about 500 patients of which 350 patients participated in a clinical trial. None of the patients were using Novodra (a popular injectable insulin) or Auralin (the oral insulin being researched) as their primary source of insulin before. All were experiencing elevated HbA1c levels.

All 350 patients were treated with Novodra to establish a baseline HbA1c level and insulin dose. After 4 weeks, which isnâ€™t enough time to capture all the change in HbA1c that can be attributed by the switch to Auralin or Novodra:

- 175 patients switched to Auralin for 24 weeks
- 175 patients continued using Novodra for 24 weeks

Data about patients feeling some adverse effects is also recorded.

### 2.Column descriptions

#### **Table** -> `patients`:

- `patient_id`: the unique identifier for each patient in the Master Patient Index (i.e. patient database) of the pharmaceutical company that is producing Auralin
- `assigned_sex`: the assigned sex of each patient at birth (male or female)
- `given_name`: the given name (i.e. first name) of each patient
- `surname`: the surname (i.e. last name) of each patient
- `address`: the main address for each patient
- `city`: the corresponding city for the main address of each patient
- `state`: the corresponding state for the main address of each patient
- `zip_code`: the corresponding zip code for the main address of each patient
- `country`: the corresponding country for the main address of each patient (all United states for this clinical trial)
- `contact`: phone number and email information for each patient
- `birthdate`: the date of birth of each patient (month/day/year). The inclusion criteria for this clinical trial is age >= 18 (there is no maximum age because diabetes is a growing problem among the elderly population)
- `weight`: the weight of each patient in pounds (lbs)
- `height`: the height of each patient in inches (in)
- `bmi`: the Body Mass Index (BMI) of each patient. BMI is a simple calculation using a person's height and weight. The formula is BMI = kg/m2 where kg is a person's weight in kilograms and m2 is their height in metres squared. A BMI of 25.0 or more is overweight, while the healthy range is 18.5 to 24.9. The inclusion criteria for this clinical trial is 16 >= BMI >= 38.

#### **Table** -> `treatments` and `treatment_cut`:

- `given_name`: the given name of each patient in the Master Patient Index that took part in the clinical trial
- `surname`: the surname of each patient in the Master Patient Index that took part in the clinical trial
- `auralin`: the baseline median daily dose of insulin from the week prior to switching to Auralin (the number before the dash) and the ending median daily dose of insulin at the end of the 24 weeks of treatment measured over the 24th week of treatment (the number after the dash). Both are measured in units (shortform 'u'), which is the international unit of measurement and the standard measurement for insulin.
- `novodra`: same as above, except for patients that continued treatment with Novodra
- `hba1c_start`: the patient's HbA1c level at the beginning of the first week of treatment. HbA1c stands for Hemoglobin A1c. The HbA1c test measures what the average blood sugar has been over the past three months. It is thus a powerful way to get an overall sense of how well diabetes has been controlled. Everyone with diabetes should have this test 2 to 4 times per year. Measured in %.
- `hba1c_end`: the patient's HbA1c level at the end of the last week of treatment
- `hba1c_change`: the change in the patient's HbA1c level from the start of treatment to the end, i.e., hba1c_start - hba1c_end. For Auralin to be deemed effective, it must be "noninferior" to Novodra, the current standard for insulin. This "noninferiority" is statistically defined as the upper bound of the 95% confidence interval being less than 0.4% for the difference between the mean HbA1c changes for Novodra and Auralin (i.e. Novodra minus Auralin).

#### **Table** -> `adverse_reactions`

- `given_name`: the given name of each patient in the Master Patient Index that took part in the clinical trial and had an adverse reaction (includes both patients treated Auralin and Novodra)
- `surname`: the surname of each patient in the Master Patient Index that took part in the clinical trial and had an adverse reaction (includes both patients treated Auralin and Novodra)
- `adverse_reaction`: the adverse reaction reported by the patient

### 3.additional information

Additional useful information:

- Insulin resistance varies person to person, which is why both starting median daily dose and ending median daily dose are required, i.e., to calculate change in dose.
- It is important to test drugs and medical products in the people they are meant to help. People of different age, race, sex, and ethnic group must be included in clinical trials. This diversity is reflected in the patients table.

### Issues with the dataset

1. Dirty Data

  Table - `Patients`

    - patient_id = 9 has misspelled name 'Dsvid' instead of David `accuracy issue`
    - state col sometimes contain full name and some times abbrivietation `consistency issue`
    - zip code col has entries with 4 digit `validity issue`
    - data missing for 12 patients in address,city,	state,zip_code	,country,	contact `completion issue`
    - incorrect data type assigned to sex, zip code, birthdate `validity issue`
    - duplicate entries by the name of John Doe `accuracy issue`
    - one patient has weight = 48 pounds `accuracy issue`
    - one patient has height = 27 inches `accuracy issue`

  Table - `Treatments` & `Treatments_cut`

    - given_name and surname col is all lower case `consistency issue`
    - remove u from Auralin and Novadra cols `validity issue`
    - '-' in novadra and Auralin col treated as nan `validity issue`
    - missing values in hba1c_change col `completion issue`
    - 1 duplicate entry by the name Joseph day `accuracy issue`
    - in hba1c_change 9 instead of 4 `accuracy issue`

  Table - `Adverse_reactions`

    - given_name and surname are all in lower case `consistency issue`

2. Messy Data

  Table - `Patients`

    - contact col contains both phone and email

  Table - `Treatments` & `Treatments_cut`

    - Auralin and Novadra col should be split into 2 cols start and end dose
    - merge both the tables

  Table - `Adverse_reactions`

    - This table should not exist independently
"""

# view dataset information
adverse_reactions.info()

# finding Nan(null) values in the patients dataframe
patients[patients['address'].isnull()]

# finding duplicates in the treatments dataframe
treatments[treatments.duplicated()]

# finding duplicates of the specific columns in the treatments dataframe
treatments[treatments.duplicated(subset=['given_name'	,'surname'])]

# finding duplicates of the specific columns in the treatments dataframe
treatments_cut[treatments_cut.duplicated(subset=['given_name'	,'surname'])]

# checking duplicates in the adverse_reactions dataframe
adverse_reactions.duplicated().sum()

# performing important operations on the dataframe using describe() function
patients.describe()

# checking specific values from height column in the patients dataframe
patients[patients['height'] == 27]

# performing specific operations on the treatments_cut dataframe
treatments_cut.describe()

# sorting the values in the columns for better readibility
treatments.sort_values('hba1c_change',na_position='first')

# making a copy of the each dataframe to avoid losing data using copy() function
patients_df = patients.copy()
treatments_df = treatments.copy()
treatments_cut_df = treatments_cut.copy()
adverse_reactions_df = adverse_reactions.copy()

# code
patients_df.fillna('No data',inplace=True)

# test
patients_df.info()

# code 
treatments_df['hba1c_change'] = treatments_df['hba1c_start'] - treatments_df['hba1c_end']
treatments_cut_df['hba1c_change'] = treatments_cut_df['hba1c_start'] - treatments_cut_df['hba1c_end']

# test
treatments_cut_df.info()

# I MADE A FUNCTION TO SEPARATE THE PHONE NUMBERS AND EMAILS FROM THE CONTACT COLUMN IN THE PATIENTS_DF DATAFRAME
def find_contact_details(text: str) -> tuple:
    # if the value is NaN, then return it
    if pd.isna(text):
        return np.nan
    
    # create the phone number pattern
    phone_number_pattern = re.compile(r"(\+[\d]{1,3}\s)?(\(?[\d]{3}\)?\s?-?[\d]{3}\s?-?[\d]{4})")
    # find the phone number from the value/text, as a result we will get a list
    phone_number  = re.findall(phone_number_pattern, text)

    # if length is 0, then the regex can't find any ph number, then define with NaN
    if len(phone_number) <= 0:
        phone_number = np.nan
    # if the country code is attached with the ph number, for that case, the first
    # element will be the country code and the 2nd element will be the actual ph
    # number. So, get that ph number
    elif len(phone_number) >= 2:
        phone_number = phone_number[1]
    # else, we will get the ph number. Grab it.
    else:
        phone_number = phone_number[0]

    # if we found the ph number (with/without country code), then remove that part from the actual value.
    # after removing the ph number, the remaining string might be the email address.
    possible_email_add = re.sub(phone_number_pattern, "", text).strip()

    # then return the ph number and the email address
    return phone_number, possible_email_add

# THERE IS SOME TECHNICAL ISSUE WITH PATIENTS_DF DATAFRAME WHICH IS NOT SHOWING CONTACTS CLEARLY
# separating phone numbers and emails from contact column of the patients_df dataframe and making two separate columns
patients_df['phone'] = patients_df["contact"].apply(lambda x: find_contact_details(x)).apply(lambda x:x[0])
patients_df['email'] = patients_df["contact"].apply(lambda x: find_contact_details(x)).apply(lambda x:x[1])

# removing column named contact of the patients_df dataframe
patients_df.drop(columns='contact',inplace=True)

# joining two dataframes treatments_df and treatments_cut df as a one table to clear unnecessary data
treatments_df = pd.concat([treatments_df,treatments_cut_df])

# using melt() function of the pandas to make a table
treatments_df = treatments_df.melt(id_vars=['given_name', 'surname' ,'hba1c_start', 'hba1c_end','hba1c_change'],var_name='type',value_name='dosage_range')

treatments_df = treatments_df[treatments_df['dosage_range'] != '-']

# splitting dosage_range column using split() function of the python to separate start and end values of dosage
treatments_df['dosage_start'] = treatments_df['dosage_range'].str.split('-').str.get(0)
treatments_df['dosage_end'] = treatments_df['dosage_range'].str.split('-').str.get(1)

# removing dosage_range column after splitting it into two columns to clear unnecessary data
treatments_df.drop(columns='dosage_range',inplace=True)

#removing unit(u) from the dosage_range column to have better numerical operations
treatments_df['dosage_start'] = treatments_df['dosage_start'].str.replace('u','')
treatments_df['dosage_end'] = treatments_df['dosage_end'].str.replace('u','')

# splitting the dosage_range column of treatments_df into two separate columns as dosage_start amd dosage_end
treatments_df['dosage_start'] = treatments_df['dosage_start'].astype('int')
treatments_df['dosage_end'] = treatments_df['dosage_end'].astype('int')

# merging treatments and adverse_reactions table into one table as treatments_df table to make clean data
treatments_df = treatments_df.merge(adverse_reactions_df, how ='left', on=['given_name','surname'])

# filling Nan values(null values) with no data
treatments_df['adverse_reaction'].fillna('no data',inplace = True)

# replacing miss spelled Dsvid with David
patients_df['given_name'].replace({'Dsvid':'David'},inplace=True)

# replacing abbreviations with full names
patients_df['state'].replace({
'AL':'Alabama',
'AK':'Alaska',
'AZ':'Arizona',
'AR':'Arkansas',
'AS':'American Samoa',
'CA':'California',
'CO':'Colorado',
'CT':'Connecticut',
'DE':'Delaware',
'DS':'District of Columbia',
'FL':'Florida',
'GA':'Georgia',
'GU':'Guam',
'HI':'Hawaii',
'ID':'Idaho',
'IL':'Illinois',
'IN':'Indiana',
'IA':'Iowa',
'KS':'Kansas',
'KY':'Kentucky',
'LA':'Louisiana',
'ME':'Maine',
'MD':'Maryland',
'MA':'Massachusetts',
'MI':'Michigan',
'MN':'Minnesota',
'MS':'Mississippi',
'MO':'Missouri',
'MT':'Montana',
'NE':'Nebraska',
'NV':'Nevada',
'NH':'New Hampshire',
'NJ':'New Jersey',
'NM':'New Mexico',
'NY':'New York',
'NC':'North Carolina',
'ND':'North Dakota',
'MP':'Northern Mariana Islands',
'OH':'Ohio',
'OK':'Oklahoma',
'OR':'Oregon',
'PA':'Pennsylvania',
'PR':'Puerto Rico',
'RI':'Rhode Island',
'SC':'South Carolina',
'SD':'South Dakota',
'TN':'Tennessee',
'TX':'Texas',
'TT':'Trust Territories',
'UT':'Utah',
'VT':'Vermont',
'VA':'Virginia',
'VI':'Virgin Islands',
'WA':'Washington',
'WV':'West Virginia',
'WI':'Wisconsin',
'WY':'Wyoming',

},inplace = True)

# changing birthdate column datatype from object to datetime64
patients_df['birthdate'] = pd.to_datetime(patients_df['birthdate'])

# replacing No data(null value) with zeros(0) to perform digits operations
patients_df['zip_code'].replace({'No data':000000},inplace = True)

# chaning datatype of zip_code column of the patients_df into string datatype
patients_df['zip_code'] = patients_df['zip_code'].astype('str')

#test
patients_df.info()

# to make all the digits equal in number to have clean readibility
string_length = patients_df['zip_code'].str.len()
max_length = string_length.max()

patients_df['zip_code'] = patients_df['zip_code'].str.pad(max_length,side='left',fillchar='0')

#test
patients_df.sample(50)

# finding duplicates in the treatments_df dataframe
treatments_df.duplicated().value_counts()

# removing duplicates from the treatments_df dataframe
treatments_df = treatments_df.drop_duplicates()

# test
treatments_df

# finding duplicates in the patients_df dataframe
# no duplicated entry found in the patients_df dataframe
patients_df.duplicated().value_counts()

# making first letter as capital using capitalize function and string accessor str
patients_df['given_name'] = patients_df['given_name'].str.capitalize()

#test
patients_df

# making first letter as a capital in the treatments_df dataframe
treatments_df['given_name'] = treatments_df['given_name'].str.capitalize()
treatments_df['surname'] = treatments_df['surname'].str.capitalize()

# test
treatments_df.info()

### DATA VISUALIZATION USING PLOTTING LIBRARIES(MODULES)
# using seaborn library
sns.relplot(data = treatments_df, x = treatments_df['hba1c_start'],y = treatments_df['hba1c_end'], hue = treatments_df['type'], kind = 'scatter' )

# these visualizations show that auralin and novodra have almost same effect
sns.relplot(data = treatments_df, x = treatments_df['hba1c_start'],y = treatments_df['hba1c_end'], hue = treatments_df['type'], kind = 'line' )

# 3D view of the difference of Auralin and Novodra to clear further confusions about effects
xx , yy = np.meshgrid(treatments_df['hba1c_start'],treatments_df['hba1c_end'])
z = yy - xx
fig = plt.figure(figsize=(12,8))

ax = plt.subplot(projection='3d')


p = ax.plot_surface(xx,yy,z,cmap='viridis')
fig.colorbar(p)

# contour plot to see 3D projection from above to clear further confusions
xx , yy = np.meshgrid(treatments_df['hba1c_start'],treatments_df['hba1c_end'])
z = yy - xx
fig = plt.figure(figsize=(12,8))

ax = plt.subplot()


p = ax.contourf(xx,yy,z,cmap='viridis')
fig.colorbar(p)

# as you can clearly see in the scatter graph, the dosages of auralin and novodra are almost same as hba1c change.
sns.relplot(treatments_df,x = treatments_df['dosage_start'], y = treatments_df['dosage_end'],hue = treatments_df['type'], kind = 'scatter')

# as you can clearly see in the line graph, the dosages of auralin and novodra are almost same as hba1c change.
sns.relplot(treatments_df,x = treatments_df['dosage_start'], y = treatments_df['dosage_end'],hue = treatments_df['type'], kind = 'line')